import fs from 'fs-extra'
import fetch from 'node-fetch'
import Parser from 'rss-parser'
import dayjs from 'dayjs'
import { OpenAI } from 'openai'
import 'dotenv/config'

const parser = new Parser()
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
})
const IMAGE_PATH = 'assets/images/post-cover'

const EXPLOIT_DB_FEED = 'https://www.exploit-db.com/rss.xml' // Exploit DB RSS Feed

// ◊û◊ß◊ï◊®◊ï◊™ ◊†◊ï◊°◊§◊ô◊ù ◊ú◊§◊í◊ô◊¢◊ï◊™ (CVE Details, NVD, ZDI)
const CVE_DETAILS_API = 'https://www.cvedetails.com/json-feed.php?last_modified=1' // CVE Details API
const ZDI_API = 'https://www.zerodayinitiative.com/advisories/?format=rss' // ZDI RSS Feed
const NVD_API = 'https://services.nvd.nist.gov/rest/json/cve/1.0' // NVD API (◊õ◊ì◊ê◊ô ◊ú◊ë◊ß◊© ◊ê◊™ ◊î◊§◊í◊ô◊¢◊ï◊™ ◊î◊ê◊ó◊®◊ï◊†◊ï◊™)

// Step 1 ‚Äì Fetch the most recent vulnerability from Exploit-DB RSS Feed
const fetchExploitDBVuln = async () => {
  const now = dayjs()
  const maxAgeDays = 30 // Only consider vulnerabilities from the last 30 days

  console.log("Checking for recent vulnerabilities from Exploit-DB...");

  try {
    const feed = await parser.parseURL(EXPLOIT_DB_FEED)

    // We filter out vulnerabilities older than the maxAgeDays (e.g., 30 days)
    const item = feed.items.find(i => {
      const pubDate = i.pubDate ? dayjs(i.pubDate) : null
      const isRecent = pubDate && now.diff(pubDate, 'day') <= maxAgeDays
      return isRecent
    })

    if (item) {
      // Fetch the full vulnerability details from the item link
      const vulnDetails = await fetchVulnDetails(item.link)

      console.log(`Found new vulnerability: ${item.title}`);
      return {
        title: item.title.trim(),
        summary: vulnDetails.summary || 'No summary.',
        link: item.link,
        date: item.pubDate || now.toISOString()
      }
    }
  } catch (err) {
    console.warn(`‚ö†Ô∏è Failed to parse ${EXPLOIT_DB_FEED}: ${err.message}`)
  }

  console.log("No new vulnerabilities found in Exploit-DB.");
  return null
}

// Fetch full vulnerability details from the Exploit-DB page
const fetchVulnDetails = async (url) => {
  try {
    const response = await fetch(url)
    const html = await response.text()

    // Parse the HTML page to extract vulnerability details
    const summary = extractVulnSummary(html)
    return { summary }
  } catch (err) {
    console.error('‚ùå Error fetching vulnerability details:', err)
    return { summary: 'Error fetching vulnerability details.' }
  }
}

// Simple function to extract summary from the vulnerability page (you can enhance this as needed)
const extractVulnSummary = (html) => {
  const match = html.match(/<meta name="description" content="([^"]+)"/)
  if (match) {
    return match[1]
  }
  return 'No detailed summary found.'
}

// Fetch vulnerabilities from CVE Details API
const fetchCVEData = async () => {
  try {
    const response = await fetch(CVE_DETAILS_API)
    const data = await response.json()

    // Filter for vulnerabilities within the last 30 days
    const recentVuln = data.find(v => dayjs(v.modified).isAfter(dayjs().subtract(30, 'days')))
    if (recentVuln) {
      return {
        title: recentVuln.cve_id,
        summary: recentVuln.summary,
        link: `https://www.cvedetails.com/cve/${recentVuln.cve_id}`,
        date: recentVuln.modified
      }
    }
  } catch (err) {
    console.error('‚ùå Error fetching CVE data:', err)
  }
  return null
}

// Fetch vulnerabilities from ZDI RSS Feed
const fetchZDIVulns = async () => {
  try {
    const feed = await parser.parseURL(ZDI_API)
    const now = dayjs()

    const item = feed.items.find(i => {
      const pubDate = i.pubDate ? dayjs(i.pubDate) : null
      return pubDate && now.diff(pubDate, 'day') <= 30
    })

    if (item) {
      return {
        title: item.title.trim(),
        summary: item.summary || 'No summary.',
        link: item.link,
        date: item.pubDate || now.toISOString()
      }
    }
  } catch (err) {
    console.error('‚ùå Error fetching ZDI data:', err)
  }
  return null
}

// Fetch vulnerabilities from NVD API
const fetchNVDVulns = async () => {
  try {
    const response = await fetch(NVD_API)
    const data = await response.json()

    const recentVuln = data.result.CVE_Items.find(v => dayjs(v.publishedDate).isAfter(dayjs().subtract(30, 'days')))
    if (recentVuln) {
      return {
        title: recentVuln.cve.CVE_data_meta.ID,
        summary: recentVuln.cve.description.description_data[0].value,
        link: `https://nvlpubs.nist.gov/nistpubs/Legacy/SP/800-53r5-final-v1.html`,
        date: recentVuln.publishedDate
      }
    }
  } catch (err) {
    console.error('‚ùå Error fetching NVD data:', err)
  }
  return null
}

// Step 2 ‚Äì Generate AI analysis using OpenAI
const askOpenAI = async (text) => {
  const res = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: 'You are a senior cybersecurity researcher writing in-depth blog posts for offensive security professionals.'
        },
        {
          role: 'user',
          content: `
Analyze this vulnerability headline:

"${text}"

Write:
- Technical Executive Summary
- Code example (PoC or bash/curl/python)
- Offensive security insights (exploitation techniques)
- Defensive measures
Return only markdown.
Ensure the tone is professional and technical.
`
        }
      ],
      temperature: 0.5,
      max_tokens: 1000
    })
  })

  const data = await res.json()
  if (!res.ok) throw new Error(data.error?.message || 'Unknown error')
  return data.choices[0].message.content
}

// Step 3 ‚Äì Generate a cover image using OpenAI (or fallback to default)
const generateImage = async (title) => {
  const prompt = `A professional, detailed cybersecurity illustration based on the topic: "${title}"`

  try {
    const res = await openai.createImage({
      prompt: prompt,
      n: 1,
      size: '1024x1024'
    })

    const imageUrl = res.data[0].url
    const imagePath = `./${IMAGE_PATH}/${title.replace(/[^a-z0-9]+/g, '-')}.png`

    const imageRes = await fetch(imageUrl)
    const buffer = await imageRes.buffer()

    await fs.outputFile(imagePath, buffer)
    console.log(`‚úÖ Image saved: ${imagePath}`)

    return imagePath
  } catch (error) {
    console.error('‚ùå Error generating image with OpenAI:', error.message)
    return './assets/images/post-cover/default-image.png'  // Default image path if image generation fails
  }
}

// Step 4 ‚Äì Write Markdown blog post to _posts directory
const writePost = async ({ title, summary, link, date }, aiContent, imagePath) => {
  const cleanDate = dayjs(date).format('YYYY-MM-DD')
  const slug = `${cleanDate}-${title.toLowerCase().replace(/[^a-z0-9]+/g, '-')}`
  const filename = `../../_posts/${slug}.md`  // Ensure this path is correct

  const markdown = `---
title: "${title}"
date: ${cleanDate}
categories: [Cyber Blog]
tags: [vulnerability, exploit, offensive-security]
layout: post
image:
  path: ${imagePath}
---

## Summary

${summary}

## Technical Analysis

${aiContent}

üìé [Original Source](${link})

---

_This article was written by sleep33._
`

  await fs.outputFile(filename, markdown)
  console.log(`‚úÖ Post created: ${filename}`)
}

// Main function: fetch vulnerabilities from multiple sources
const main = async () => {
  try {
    let vuln = await fetchExploitDBVuln()

    if (!vuln) {
      vuln = await fetchCVEData() || await fetchZDIVulns() || await fetchNVDVulns()
    }

    if (!vuln) {
      await createDefaultPost()  // If no vulnerability is found, create a default post
      return console.log('‚ö†Ô∏è No vulnerability found from any sources.')
    }

    const aiContent = await askOpenAI(`${vuln.title}\n${vuln.summary}`)
    const imagePath = await generateImage(vuln.title)
    await writePost(vuln, aiContent, imagePath)
  } catch (err) {
    console.error('‚ùå', err.message)
  }
}

main()
