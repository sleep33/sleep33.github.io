import fs from 'fs-extra'
import fetch from 'node-fetch'
import Parser from 'rss-parser'
import dayjs from 'dayjs'
import { OpenAI } from 'openai'
import 'dotenv/config'

const parser = new Parser()
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
})
const IMAGE_PATH = 'assets/images/post-cover'

const EXPLOIT_DB_FEED = 'https://www.exploit-db.com/rss.xml' // Exploit DB RSS Feed

// Fetch vulnerabilities from Exploit-DB RSS Feed
const fetchExploitDBVuln = async () => {
  const now = dayjs()
  const maxAgeDays = 30 // Only consider vulnerabilities from the last 30 days
  const vulnList = []

  console.log("Checking for recent vulnerabilities from Exploit-DB...");

  try {
    const feed = await parser.parseURL(EXPLOIT_DB_FEED)
    
    // Filter vulnerabilities from the last maxAgeDays
    feed.items.forEach(i => {
      const pubDate = i.pubDate ? dayjs(i.pubDate) : null
      if (pubDate && now.diff(pubDate, 'day') <= maxAgeDays) {
        vulnList.push({
          title: i.title.trim(),
          link: i.link,
          pubDate: i.pubDate,
          summary: i.contentSnippet || 'No summary available.'
        })
      }
    })
    
    return vulnList
  } catch (err) {
    console.warn(`‚ö†Ô∏è Failed to parse ${EXPLOIT_DB_FEED}: ${err.message}`)
    return []
  }
}

// Select a random vulnerability from the list
const selectRandomVuln = (vulnList) => {
  if (vulnList.length === 0) return null
  const randomIndex = Math.floor(Math.random() * vulnList.length)
  return vulnList[randomIndex]
}

// Fetch full vulnerability details from the Exploit-DB page
const fetchVulnDetails = async (url) => {
  try {
    const response = await fetch(url)
    const html = await response.text()
    const summary = extractVulnSummary(html)
    return { summary }
  } catch (err) {
    console.error('‚ùå Error fetching vulnerability details:', err)
    return { summary: 'Error fetching vulnerability details.' }
  }
}

// Simple function to extract summary from the vulnerability page
const extractVulnSummary = (html) => {
  const match = html.match(/<meta name="description" content="([^"]+)"/)
  if (match) {
    return match[1]
  }
  return 'No detailed summary found.'
}

// Step 2 ‚Äì Generate AI analysis using OpenAI
const askOpenAI = async (text) => {
  const res = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: 'You are a senior cybersecurity researcher writing in-depth blog posts for offensive security professionals.'
        },
        {
          role: 'user',
          content: `
Analyze this vulnerability headline:

"${text}"

Write:
- Technical Executive Summary
- Code example (PoC or bash/curl/python)
- Offensive security insights (exploitation techniques)
- Defensive measures
Return only markdown.
Ensure the tone is professional and technical.
`
        }
      ],
      temperature: 0.5,
      max_tokens: 1000
    })
  })

  const data = await res.json()
  if (!res.ok) throw new Error(data.error?.message || 'Unknown error')
  return data.choices[0].message.content
}

// Step 3 ‚Äì Write Markdown blog post to _posts directory
const writePost = async ({ title, summary, link, date }, aiContent, imagePath) => {
  const cleanDate = dayjs(date).format('YYYY-MM-DD')
  const slug = `${cleanDate}-${title.toLowerCase().replace(/[^a-z0-9]+/g, '-')}`
  const filename = `../../_posts/${slug}.md`

  const markdown = `---
title: "${title}"
date: ${cleanDate}
categories: [Cyber Blog]
tags: [vulnerability, exploit, offensive-security]
layout: post
image:
  path: ${imagePath}
---

## Summary

${summary}

## Technical Analysis

${aiContent}

üìé [Original Source](${link})

---

_This article was written by sleep33._
`

  await fs.outputFile(filename, markdown)
  console.log(`‚úÖ Post created: ${filename}`)
}

// Step 4 ‚Äì Generate a cover image using OpenAI (or fallback to default)
const generateImage = async (title) => {
  const prompt = `A professional, detailed cybersecurity illustration based on the topic: "${title}"`

  try {
    const res = await openai.createImage({
      prompt: prompt,
      n: 1,
      size: '1024x1024'
    })

    const imageUrl = res.data[0].url
    const imagePath = `./${IMAGE_PATH}/${title.replace(/[^a-z0-9]+/g, '-')}.png`

    const imageRes = await fetch(imageUrl)
    const buffer = await imageRes.buffer()

    await fs.outputFile(imagePath, buffer)
    console.log(`‚úÖ Image saved: ${imagePath}`)

    return imagePath
  } catch (error) {
    console.error('‚ùå Error generating image with OpenAI:', error.message)
    return './assets/images/post-cover/default-image.png'  // Default image path if image generation fails
  }
}

// Main function: fetch vulnerabilities from multiple sources
const main = async () => {
  try {
    const vulnList = await fetchExploitDBVuln()

    if (vulnList.length === 0) {
      console.log('‚ö†Ô∏è No new vulnerabilities found from any sources.')
      return
    }

    const selectedVuln = selectRandomVuln(vulnList) // Select a random vulnerability
    if (!selectedVuln) {
      console.log('‚ö†Ô∏è No vulnerability selected.')
      return
    }

    const vulnDetails = await fetchVulnDetails(selectedVuln.link)
    const aiContent = await askOpenAI(`${selectedVuln.title}\n${vulnDetails.summary}`)
    const imagePath = await generateImage(selectedVuln.title)
    await writePost(selectedVuln, aiContent, imagePath)
  } catch (err) {
    console.error('‚ùå', err.message)
  }
}

main()
