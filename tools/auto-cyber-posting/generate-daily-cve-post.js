import fs from 'fs-extra'
import fetch from 'node-fetch'
import Parser from 'rss-parser'
import dayjs from 'dayjs'
import 'dotenv/config'

const parser = new Parser()
const OPENAI_KEY = process.env.OPENAI_API_KEY
const IMAGE_URL = 'https://source.unsplash.com/featured/?cybersecurity,hacking'

const RSS_FEEDS = [
  'https://www.exploit-db.com/rss.xml',
  'https://packetstormsecurity.com/files/feed.xml',
  'https://www.security-database.com/feed.php?type=xml'
]

const fetchRecentVuln = async () => {
  const now = dayjs()
  const maxAgeDays = 30

  for (const url of RSS_FEEDS) {
    try {
      const feed = await parser.parseURL(url)

      const item = feed.items.find(i => {
        const pubDate = i.pubDate ? dayjs(i.pubDate) : null
        const isRecent = pubDate && now.diff(pubDate, 'day') <= maxAgeDays
        return isRecent
      })

      if (item) {
        return {
          title: item.title.trim(),
          summary: item.contentSnippet || 'No summary.',
          link: item.link,
          date: item.pubDate || now.toISOString()
        }
      }
    } catch (err) {
      console.warn(`‚ö†Ô∏è Failed to parse ${url}: ${err.message}`)
    }
  }

  return null
}

const askOpenAI = async (text) => {
  const res = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      Authorization: `Bearer ${OPENAI_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: 'You are a technical cyber researcher writing deep-dive blog posts for red teamers.'
        },
        {
          role: 'user',
          content: `
Analyze this vulnerability headline:

"${text}"

Write:
- Technical Executive Summary
- Code example (PoC or bash/curl/python)
- Offensive security insights (exploitation techniques)
- Defensive measures
Return only markdown.
`
        }
      ],
      temperature: 0.5,
      max_tokens: 1000
    })
  })

  const data = await res.json()
  if (!res.ok) throw new Error(data.error?.message || 'Unknown error')
  return data.choices[0].message.content
}

const writePost = async ({ title, summary, link, date }, aiContent) => {
  const cleanDate = dayjs(date).format('YYYY-MM-DD')
  const slug = title.toLowerCase().replace(/[^a-z0-9]+/g, '-').slice(0, 60)
const filename = `../../_posts/${date}-${slug}.md`
const markdown = `---
title: "${title}"
date: ${cleanDate}
categories: [Cyber]
tags: [vulnerability, exploit, offensive-security]
layout: post
image:
  path: ${IMAGE_URL}
---

## üîç Summary

${summary}

## üß† AI Technical Analysis

${aiContent}

üìé [Original Source](${link})

---

_This article was written by sleep33._
`

  await fs.outputFile(filename, markdown)
  console.log(`‚úÖ Post created: ${filename}`)
}

const main = async () => {
  try {
    const vuln = await fetchRecentVuln()
    if (!vuln) return console.log('‚ö†Ô∏è No vulnerability found in recent feeds.')
    const aiContent = await askOpenAI(`${vuln.title}\n${vuln.summary}`)
    await writePost(vuln, aiContent)
  } catch (err) {
    console.error('‚ùå', err.message)
  }
}

main()
